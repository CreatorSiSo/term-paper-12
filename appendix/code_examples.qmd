<!-- # Rym Source Code Examples -->
# Rym Quellcode Beispiele

## Factorial

Two possible implementations for calculating factorials.
Pseudo code from Wikipedia:
```
define factorial(n):
  f := 1
  for i := 1, 2, 3, ..., n:
    f := f × i
  return f
```

### Imperative approach

```rym
func factorial(n: uint) -> uint {
  mut result = 1
  for const i in 1..=n {
    result *= i
  }
  result
}
```

### Declarative approach

```rym
func factorial(n: uint) -> uint {
	(1..=n).fold(1, (accum, i) -> accum * i)
}
```

{{< pagebreak >}}

## Find Summands

```rym
/// Function for finding two items in a list,
/// that add up to the given sum.
///
/// numbers array must be sorted
func summands(numbers: [int], sum: int) -> Option<[usize; 2]> {
  mut low = 0
  mut high = numbers.len() - 1

  while low < high {
    const current_sum = numbers[low] + numbers[high]

    if current_sum == sum {
      return Some([numbers[low], numbers[high]])
    } else if current_sum < sum {
      low += 1
    } else {
      high -= 1
    }
  }

  None
}

const numbers = [-14, 1, 3, 6, 7, 7, 12]
const sum = -13

if const Some([left, right]) = summands(numbers, sum) {
  print(f"Sum of {left} and {right} = {sum}")
} else {
  print("Pointers have crossed, no sum found")
}
```

{{< pagebreak >}}
