<!-- # Analyzing existing programming languages -->
# Analyse bestehender Programmiersprachen

<!--
The next step in finding an answer is to investigate currently used programming languages,
especially those that have appeared more recently.
The goal is to find out what they have changed compared to the older languages.
-->
Der nächste Schritt auf der Suche nach einer Antwort besteht darin, die derzeit verwendeten Programmiersprachen zu untersuchen,
insbesondere diejenigen, die erst vor kurzem erschienen sind.
Ziel ist es, herauszufinden, was diese im Vergleich zu den älteren Sprachen verändert haben.

<!-- ## Data to analyze -->
## Zu analysierende Daten

<!--
To keep the number of languages within a reasonable range, only the most popular programming languages of 2022 were analysed.
The primary source for this data is the _StackOverflow Developer Survey 2022_,
a global survey conducted annually since 2011, aimed at anyone who programs.
Below this paragraph one can see a statistic from the survey, where programming languages are ranked according to their popularity.
Participants were asked to vote for all languages they used last year and would use again.
The height of a bar corresponds to the number of votes that language received.
-->
Um die Zahl der Sprachen in einem vernünftigen Rahmen zu halten, wurden nur die beliebtesten Programmiersprachen des Jahres 2022 analysiert.
Die Hauptquelle für diese Daten ist der _StackOverflow Developer Survey 2022_,
eine weltweite Umfrage, die seit 2011 jährlich durchgeführt wird und sich an alle richtet, die programmieren.
Unterhalb dieses Absatzes kann man eine Statistik aus der Umfrage sehen, in der die Programmiersprachen nach ihrer Beliebtheit geordnet sind.
Die Teilnehmer wurden gebeten, für alle Sprachen zu stimmen, die sie im letzten Jahr verwendet haben und wieder verwenden würden.
Die Höhe eines Balkens entspricht der Anzahl der Stimmen, die diese Sprache erhalten hat.
[@so_surveys; @so_survey_2022; @so_survey_2022_data]

<!-- ![Popularity of programming languages in 2022](../data/stackoverflow-survey-2022.png){#fig-fig-so-survey} -->
<!-- TODO: Color should show the prog lang age -->
![Die beliebtesten Programmiersprachen im Jahr 2022](../data/stackoverflow-survey-2022.png){#fig-fig-so-survey height="320"}

<!--
The original data also mentions HTML, CSS, SQL, Bash/Shell, and PowerShell.
These are not considered here because they are highly specialised and in part not Turing-complete.[^tc-note]

[^tc-note]: A Turing-complete language can be used to implement any algorithm. @scott_2009, @scott_2016
-->
In den ursprünglichen Daten werden auch HTML, CSS, SQL, Bash/Shell und PowerShell erwähnt.
Diese werden hier nicht berücksichtigt, da sie hochspezialisiert und teilweise nicht Turing-vollständig[^tc-note] _(engl. Turing-complete)_ sind.

[^tc-note]: Eine Turing-vollständige Sprache kann zur Umsetzung jedes beliebigen Algorithmus benutzt werden. @scott_2009, @scott_2016

<!-- TODO: Reword once age is visible in diagram
According to the StackOverflow Developer Survey 2022, JavaScript (1995), Python (1991), Typescript (2012), Java (1995), C# (2000),
C++ (1985), PHP (1995), C (1978), Go (2009) and Rust (2010) are the ten most widely used programming languages.
On average, these languages are therefore 25 years old.
[@age_prog_langs] -->

## Neuere Programmiersprachen

<!-- TODO Mention that ts is second most popular language -->
<!--
All of the newer programming languages that appear in the statistics are inspired by, or even the successors of, other languages.
These languages include, for example, TypeScript a statically typed language that builds on JavaScript by adding optional type annotations and other features.
Developed and maintained by Microsoft, it has gained considerable popularity in recent years, particularly in large-scale web development projects.
TypeScript's static typing allows for better tooling and increased developer productivity, making it easier to catch bugs early in the development process.
Because it is just a super-set of JavaScript, developers are able to adopt TypeScript incrementally into existing JavaScript projects.
-->
Alle neueren Programmiersprachen, die in der Statistik aufgeführt sind, wurden von anderen Sprachen inspiriert oder sind sogar die Nachfolger dieser Sprachen.
Zu diesen Sprachen gehört z.B. TypeScript, eine statisch typisierte Sprache, die auf JavaScript aufbaut,
indem sie optionale Typ-Annotationen und andere Funktionen hinzufügt.
Sie wird von Microsoft entwickelt und hat in den letzten Jahren vor allem bei großen Webentwicklungsprojekten erheblich an Popularität gewonnen.
Da es sich nur um ein Super-Set von JavaScript handelt, können Entwickler TypeScript schrittweise in bestehende JavaScript-Projekte integrieren.
[@ts_web]

<!--
In recent years, Rust has become a very popular programming language.
Originally developed by Graydon Hoare at Mozilla, Rust is now an independent community project.
The language is designed with systems programming in mind, combining both safety and speed.
With a strong focus on type safety, memory safety (without relying on automatic garbage collection) and concurrency.
Rust prohibits both null and dangling pointers.
These are known to cause hard-to-debug bugs which, according to Google,
are responsible for over 50% of all bugs in Android.
-->
In den letzten Jahren hat sich Rust zu einer sehr beliebten Programmiersprache entwickelt.
Ursprünglich von Graydon Hoare bei Mozilla entwickelt, ist Rust heute ein unabhängiges Gemeinschaftsprojekt.
Die Sprache ist für die Systemprogrammierung gedacht und kombiniert Sicherheit und Geschwindigkeit.
Der Schwerpunkt liegt auf Typsicherheit, Speichersicherheit (ohne automatische Garbage Collection) und Parallelität.
Rust verbietet sowohl Null- als auch Dangling-Pointer.
Diese sind bekannt dafür, schwer zu behebende Fehler zu verursachen, die laut Google,
für über 50% aller Bugs in Android verantwortlich sind.
[@infoq_rust_interview; @scott_2016 S.867f; @rust_web; @google_rust]

<!--
Kotlin from JetBrains^[JetBrains is a company that develops integrated development environments] can be seen as the successor to Java.
It is more concise, expressive and secure, interoperates with Java and continues to run on the Java Virtual Machine (JVM).
Apache's^[The Apache Software Foundation is a nonprofit organisation supporting open source software projects. @apache] Groovy, Closure and Scala are further languages based on the JVM
that have not gained as much popularity as Kotlin.
One of the biggest factors in its success has been Google's official support for Android development using Kotlin.
-->
Kotlin von JetBrains^[JetBrains ist ein Unternehmen, das integrierte Entwicklungsumgebungen entwickelt] kann als Nachfolger von Java betrachtet werden.
Sie ist übersichtlicher, eindeutiger und sicherer, sie ist interoperabel mit Java und läuft nach wie vor auf der Java Virtual Machine (JVM).
Groovy von Apache^[Die Apache Software Foundation ist eine gemeinnützige Organisation, die Open-Source-Softwareprojekte unterstützt. @apache], Closure und Scala sind weitere Sprachen, die auf der JVM basieren,
aber nicht so populär geworden sind wie Kotlin.
Einer der größten Faktoren für den Erfolg war die offizielle Unterstützung von Google für Android-Entwicklung mit Kotlin.
[@groovy_web; @groovy_docs; @closure_web; @closure_ref; @scala_web; @scala_origins; @scala_spec; @scott_2016 S.867f; @jetbrains_web; @kotlin_web; @kotlin_ref; @android_kotlin]

<!--
Google has also created some programming languages of their own, including Go, Dart and Carbon.
Go was created to combine the efficiency of compiled languages with the simplicity of scripting languages.
It is used for building networked services, large-scale web applications and other concurrent software.
Dart was developed to provide fast user interface development across multiple platforms.
Using the flutter framework one can create cross-platform apps for Android, IOS, Web, Windows, macOS and Linux.
Carbon, an experimental successor to C++, is the most recent project.
It was released at the end of 2022 and is still far from mature. -->
Google hat auch einige eigene Programmiersprachen entwickelt, darunter Go, Dart und Carbon.
Go wurde entwickelt, um die Effizienz von kompilierten Sprachen mit der Einfachheit von Skriptsprachen zu kombinieren.
Es wird für die Entwicklung von vernetzten Diensten, groß angelegten Webanwendungen und anderer parallel laufender Software verwendet.
Dart wurde entwickelt, um eine schnelle Entwicklung von Benutzeroberflächen für viele Plattformen zu ermöglichen.
Mit dem Flutter-Framework lassen sich plattform-übergreifende Anwendungen für Android, IOS, Web, Windows, macOS und Linux erstellen.
Das jüngste Projekt ist Carbon, ein experimenteller Nachfolger für C++.
Es wurde Ende 2022 veröffentlicht und ist noch lange nicht ausgereift.
[@go_web; @go_spec; @flutter_multi; @carbon]

<!--
Swift, on the other hand, was introduced by Apple in 2014 as a replacement for Objective-C.
It was designed to be more readable, safer and faster than Objective-C and has quickly gained popularity in the iOS and macOS development community.
Swift offers modern language features like functional programming, generics and type inference, making it easier to write complex software systems.
Swift has also gained popularity in server-side development with the introduction of Swift on the server, a project that enables the use of Swift for backend systems. -->
<!-- TODO Refine sources -->
Swift hingegen wurde 2014 von Apple als Ersatz für Objective-C eingeführt.
Es wurde entwickelt, um lesbarer, sicherer und schneller als Objective-C zu sein
und hat bei iOS- und macOS-Entwicklern schnell an Popularität gewonnen.
Swift bietet moderne Features wie funktionale Programmierung, Generics und Typinferenz,
die das Schreiben komplexer Softwaresysteme erleichtern.
Swift hat mit der Einführung von Swift on the Server, einem Projekt,
das die Verwendung von Swift für Backend-Systeme ermöglicht,
auch in der serverseitigen Entwicklung an Popularität gewonnen.
[@swift_docs; @swift_org]

<!-- TODO mention that most languages are open source
Swift is also open-source, meaning that developers from all around the world can contribute to its development and evolution. -->

<!-- - __TODO__
  - Julia: Developed to be used in scientific, engineering, and technical computing, Julia is a high-performance, high-level dynamic programming language. It is designed to be easy to use and has a syntax similar to that of MATLAB or Python. Julia is particularly well-suited for data science and numerical computing and it's been gaining popularity among researchers and data scientists. -->

## Common Recent Changes

These new languages improve on their predecessors by fixing problems and inconveniences that they encountered and could not remove.
Sometimes the new features that improve safety and usability are ported back to the older languages.

### Type Systems

A common change is the introduction of static typing, or at least type annotations.
This feature allows the compiler or third party tools to check for type errors at compile time,
making it easier to catch bugs early in the development process.
TypeScript is a very good example of this, as it adds an entire type system on top of JavaScript,
which can prevent about 15% of bugs.
[@to_type_or_not_to_type]
There is even a proposal to add type annotations to JavaScript,
so that tools like TypeScript can skip large parts of the compilation step.
[@stateofjs_missing; @tc39_type_annotations]
Other dynamically typed languages, like Python and PHP already support type hints and Lua has tools that are similar to TypeScript.
All the other languages just mentioned (Rust, Kotlin, Go, Dart, Swift) require static types.

- getting more powerful
- type inference
- Type Classes have been adapted
  - easily extend the functionality of uncontrollable 3rd parties
  - Swift protocols
  - C++23 concepts
  - Rust traits
  - Java, C# Interfaces?
- where?
  - Rust, Go, Swift
  - auto in C++
  - state of C, C++, C#, Java, php types?


### Null Safety

Tony Hoare considers calling null references, which he added to ALGOL W in 1965, his "billion dollar mistake" @infoq_null_ref.
They can represent the absence of a value, but can also cause hard to find bugs if not properly handled.
To address this, many programming languages have introduced null safety features that make it easier for developers to handle and prevent null pointers.
These include optional classes, nullable type hints, and optional enums.
The null coalescing operator and optional chaining operator are also commonly used to handle these issues and make code more readable.
<!-- TODO Citation needed -->

<!-- - null safety
  - explain what it means
  - mention "the billion dollar mistake"
  - Ts
    - checks for "undefined" and "null" at compile time
  - Rust
    - null safe by design
    - Option enum
  - Java
    - Optional class
  - C#
    - checks for values that could be null at compile time
    - nullable type: T?
  - C++
    - added std::optional
  - PHP
    - added nullable type hint
  - Kotlin
    - has nullable types
    - checks for null safety at compile time
  - Dart
    - Version 2.0 added opt-in null safety checks
    - Version 3.0 requires null safety checks
  - Swift
    - optional enum (works similar to Rust)
  - optional/nullable type
    - often indicated by putting a "?" after the types name: "Type?"
  - Null coalescing operator
    - Js, Ts, C#, Kotlin, Dart, Swift, PHP, Ruby
  - Optional chaining / Null conditional operator
    - Js, Ts, C#, PHP (Null-safe operator), Kotlin (Safe calls), Dart, Swift -->

### Functional/Declarative programming

- C++
  - addition and work on the _functional_ module
  - algorithms to work with lists and iterators
- Python

<!-- ## Results

### Problems of current and past programming languages

- Parallelization
- (Uncontrolled) Undefined Behaviour
  - https://blog.sigplan.org/2021/11/18/undefined-behavior-deserves-a-better-reputation
- Side Effect Safety, Non-local reasoning, Sand Boxing
  - https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/comment/e5s3vhb/?utm_source=share&utm_medium=web2x&context=3
  - The code that we read is not understandable in isolation. For example, taking C++: `call(foo);`, is `foo` modified? Dunno.
    - https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/comment/e5v3vj5/?utm_source=share&utm_medium=web2x&context=3
  - Solved by: Koka
- Cannot rewind time while debugging
  - [Reversible Computation: Extending Horizons of Computing](https://link.springer.com/content/pdf/10.1007/978-3-030-47361-7.pdf)
- Rust solves most of these, but a watered-down version which only loses a bit of efficiency could probably help a lot. [Source](https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/comment/e5v3vj5/?utm_source=share&utm_medium=web2x&context=3) => Basically what Rym tries to be :)

### Problems of new programming languages

- https://www.quora.com/What-are-the-biggest-problems-with-modern-programming-languages?share=1
- There are too many of them
- No innovation
  - Too conservative, offer no real improvement to what came before
  - No clear gain to switching to this language
- Being specific to one problem
  - do interesting thing X but do not advance in all other places

### Qualities of a good programming language

- (progressively having to learn new parts / not having to learn everything at once) makes the language easier to learn
  - see talk about type classes, concept is from Swift
  - begin with a simple script like Python and be able to make it complex over time
- future proof
  - reserved keywords: try, catch, throw, ..
  - allow breaking changes (semantic versioning), Rust good, Python ok, Js/C++ bad, C does not extend language anymore but rather core-libs right?
- Good Package Manager
  - https://www.reddit.com/r/ProgrammingLanguages/comments/zqjf47/a_good_dependency_manager_for_a_new_programming/
  - https://futhark-lang.org/blog/2018-07-20-the-future-futhark-package-manager.html -->


<!-- [Programming Language Explorations](https://rtoal.github.io/ple) -->

{{< pagebreak >}}
