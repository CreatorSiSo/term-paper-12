<!-- # Analyzing existing programming languages -->
# Analyse bestehender Programmiersprachen

<!--
The next step in finding an answer is to investigate currently used programming languages,
especially those that were recently created, and to identify what they changed in comparison to older ones.
-->
Der nächste Schritt auf der Suche nach einer Antwort besteht darin, die derzeit verwendeten Programmiersprachen zu untersuchen,
insbesondere solche, die erst vor kurzem erschienen sind, und herauszufinden, was sie im Vergleich zu älteren Sprachen geändert haben.

<!-- ## Data to analyze -->
## Zu analysierende Daten

<!--
To keep the number of languages within a reasonable range, only the most popular programming languages of 2022 were analysed.
The primary source for this data is the _StackOverflow Developer Survey 2022_,
a global survey conducted annually since 2011, aimed at anyone who programs.
Below this paragraph you can see a statistic from the survey, where programming languages are ranked according to their popularity.
Participants were asked to vote for all languages they used last year and would use again.
The height of a bar corresponds to the number of votes that language received.
-->
Um die Zahl der Sprachen in einem vernünftigen Rahmen zu halten, wurden nur die beliebtesten Programmiersprachen des Jahres 2022 analysiert.
Die Hauptquelle für diese Daten ist der _StackOverflow Developer Survey 2022_,
eine weltweite Umfrage, die seit 2011 jährlich durchgeführt wird und sich an alle richtet, die programmieren.
Unterhalb dieses Absatzes sehen Sie eine Statistik aus der Umfrage, in der die Programmiersprachen nach ihrer Beliebtheit geordnet sind.
Die Teilnehmer wurden gebeten, für alle Sprachen zu stimmen, die sie im letzten Jahr verwendet haben und wieder verwenden würden.
Die Höhe eines Balkens entspricht der Anzahl der Stimmen, die diese Sprache erhalten hat.
[@so_surveys; @so_survey_2022; @so_survey_2022_data]

<!-- ![Popularity of programming languages in 2022](../data/stackoverflow-survey-2022.png){#fig-fig-so-survey} -->
![Die beliebtesten Programmiersprachen im Jahr 2022 __TODO: Color should show the prog lang age__](../data/stackoverflow-survey-2022.png){#fig-fig-so-survey}

<!--
The original data also mentions HTML, CSS, SQL, Bash/Shell, and PowerShell.
These are not considered here because they are highly specialised and in part not Turing-complete.[^tc-note]

[^tc-note]: A Turing-complete language can be used to implement any algorithm. @scott_2009, @scott_2016
-->
In den ursprünglichen Daten werden auch HTML, CSS, SQL, Bash/Shell und PowerShell erwähnt.
Diese werden hier nicht berücksichtigt, da sie hochspezialisiert und teilweise nicht Turing-vollständig _(engl. Turing-complete)_ sind.[^tc-note]

[^tc-note]: Eine Turing-vollständige Sprache kann zur Umsetzung jedes beliebigen Algorithmus benutzt werden. @scott_2009, @scott_2016

__TODO: Reword once age is visible in diagram__
According to the StackOverflow Developer Survey 2022, JavaScript (1995), Python (1991), Typescript (2012), Java (1995), C# (2000),
C++ (1985), PHP (1995), C (1978), Go (2009) and Rust (2010) are the ten most widely used programming languages.
On average, these languages are therefore 25 years old.
[@age_prog_langs]

<!-- ## Popular Languages -->
<!-- ## Populäre Sprachen -->

<!-- The popular languages are popular for a variety of reasons, some of the most common reasons include:

Widespread use:
Many popular languages have been around for a long time and have been adopted by many companies and organizations. This means that there is a large community of developers who use the language, which makes it easier to find resources, tutorials, and support.

Versatility:
Popular languages are often versatile and can be used for a wide range of projects. For example, Python is popular among data scientists, engineers, and web developers, while JavaScript is popular for both front-end and back-end web development.

Large ecosystem:
Popular languages often have a large ecosystem of libraries and frameworks that make it easier to develop and deploy applications. This means that developers can use pre-built tools and libraries to speed up development and reduce the time it takes to get an application up and running.

High demand:
Popular languages are often in high demand in the job market. This means that developers who know these languages are more likely to be able to find a job and have a higher earning potential.

Community support:
Popular languages have a strong community support which helps in the development of the language, troubleshooting and learning new features.

Ease of use:
Some popular languages are designed to be easy to learn and use, which makes them a good choice for beginners.

All these factors contribute to the popularity of a programming language. They make it easy for developers to start using the language, and they provide a large community of developers who can help with questions and issues. This makes it more likely that a language will continue to be popular over time. -->


<!-- ## Newer Programming Languages -->
## Neuere Programmiersprachen

<!--
All of the newer programming languages that appear in the statistics are inspired by, or even the successors of, other languages.
These languages include, for exmample, Kotlin from JetBrains^[JetBrains is a company that develops integrated development environments] as a successor to Java.
Kotlin is said to be more concise, expressive and secure, while continuing to run on the Java Virtual Machine and offering interoperability with Java.
Apache's^[The Apache Software Foundation is a nonprofit organisation supporting open source software projects. @apache] Groovy, Closure and Scala are further languages based on the JVM
that have not gained as much popularity as Kotlin.
Perhaps the biggest factor in its success has been Google's official support for Android development using Kotlin.
-->
Alle neueren Programmiersprachen, die in den Statistiken aufgeführt werden, sind von anderen Sprachen inspiriert oder sogar deren Nachfolger.
Zu diesen Sprachen gehört z.B. Kotlin von JetBrains^[JetBrains ist ein Unternehmen, das integrierte Entwicklungsumgebungen entwickelt] als Nachfolger von Java.
Kotlin soll kompakter, ausdrucksstärker und sicherer sein, aber weiterhin auf der Java Virtual Machine laufen und Interoperabilität mit Java bieten.
Groovy von Apache^[Die Apache Software Foundation ist eine gemeinnützige Organisation, die Open-Source-Softwareprojekte unterstützt. @apache], Closure und Scala sind weitere Sprachen, die auf der JVM basieren,
aber nicht so populär geworden sind wie Kotlin.
Der vielleicht größte Faktor für den Erfolg war die offizielle Unterstützung von Google für Android-Entwicklung mit Kotlin.
[@groovy_web; @groovy_docs; @closure_web; @closure_ref; @scala_web; @scala_origins; @scala_spec; @scott_2016 S.867f; @jetbrains_web; @kotlin_web; @kotlin_ref; @android_kotlin]

<!--
In recent years, Rust has become a very popular programming language.
Originally developed by Graydon Hoare at Mozilla, Rust is now an independent community project.
The language is designed with systems programming in mind, combining both safety and speed.
With a strong focus on type safety, memory safety (without relying on automatic garbage collection) and concurrency.
Rust prohibits both null and dangling pointers.
These are known to cause hard-to-debug bugs which, according to Google,
are responsible for over 50% of all bugs in Android.
-->
In den letzten Jahren hat sich Rust zu einer sehr beliebten Programmiersprache entwickelt.
Ursprünglich von Graydon Hoare bei Mozilla entwickelt, ist Rust heute ein unabhängiges Gemeinschaftsprojekt.
Die Sprache ist für die Systemprogrammierung gedacht und kombiniert Sicherheit und Geschwindigkeit.
Der Schwerpunkt liegt auf Typsicherheit, Speichersicherheit (ohne automatische Garbage Collection) und Parallelität.
Rust verbietet sowohl Null- als auch Dangling-Pointer.
Diese sind bekannt dafür, schwer zu behebende Fehler zu verursachen, die laut Google,
für über 50% aller Bugs in Android verantwortlich sind.
[@infoq_rust_interview; @scott_2016 S.867f; @rust_web; @google_rust]

Google has also created some programming languages of their own, including Go, Dart and Carbon.
Go was created to combine the efficiency of compiled languages with the simplicity of scripting languages.
It is used for building networked services, large-scale web applications and other concurrent software.
On the other hand, Dart was developed to provide fast user interface development across multiple platforms.
Using the flutter framework one can create cross-platform apps for Android, IOS, Web, Windows, macOS and Linux.
[@go_web; @go_spec; @flutter_multi]

__TODO Google: Go, Dart__
Go and Dart are both programming languages developed by Google that have been gaining popularity in recent years.
Both languages were created to address specific issues in the programming world and to provide a solution for developers.
Go, often referred to as "Go", was developed to address the need for a language that is simple,
efficient and easy to learn, while still providing a high level of performance and scalability.
Go is particularly well-suited for building networked services and large-scale web applications,
it aims to make it easy to write concurrent and parallel systems.
On the other hand, Dart was created to address the issue of building fast and high-performance apps on multiple platforms.
Dart is designed to be a client-optimized language for building fast apps on any platform,
it allows for a single codebase to run on different platforms and provides features such as Just-In-Time (JIT) and Ahead-of-Time (AOT) compilation.

- __TODO__
  - Carbon?
  - Swift: Developed by Apple, Swift is a general-purpose, compiled programming language that is designed to be easy to learn and use. It is particularly well-suited for developing iOS and macOS applications, and has been gaining popularity among developers for its modern syntax, strong type system, and improved performance over Objective-C.
  - TypeScript: Developed by Microsoft, TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. It was designed to make it easier to write and maintain large-scale JavaScript applications by adding features such as static typing, interfaces, and classes. It is widely used in Angular and React projects.
  - Julia: Developed to be used in scientific, engineering, and technical computing, Julia is a high-performance, high-level dynamic programming language. It is designed to be easy to use and has a syntax similar to that of MATLAB or Python. Julia is particularly well-suited for data science and numerical computing and it's been gaining popularity among researchers and data scientists.
  - Scala: Developed by Martin Odersky, Scala is a general-purpose programming language that runs on the Java Virtual Machine (JVM). It is designed to be an object-oriented and functional language, and it's been gaining popularity among developers for its ability to write concurrent and parallel systems. It's also widely used for big data processing using Apache Spark.

## Results

### Problems of current and past programming languages

- Parallelization
- (Uncontrolled) Undefined Behaviour
  - https://blog.sigplan.org/2021/11/18/undefined-behavior-deserves-a-better-reputation
- Side Effect Safety, Non local reasoning, Sand Boxing
  - https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/comment/e5s3vhb/?utm_source=share&utm_medium=web2x&context=3
  - Code that we read is not understandable in isolation. For example, taking C++: `call(foo);`, is `foo` modified? Dunno.
    - https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/comment/e5v3vj5/?utm_source=share&utm_medium=web2x&context=3
  - Solved by: Koka
- Cannot rewind time while debugging
  - [Reversible Computation: Extending Horizons of Computing](https://link.springer.com/content/pdf/10.1007/978-3-030-47361-7.pdf)
- Rust solves most of these, but a watered-down version which only loses a bit of efficiency could probably help a lot. [Source](https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/comment/e5v3vj5/?utm_source=share&utm_medium=web2x&context=3) => Basically what Rym tries to be :)

### Problems of new programming languages

- https://www.quora.com/What-are-the-biggest-problems-with-modern-programming-languages?share=1
- There are too many of them
- No innovation
  - Too conservative, offer no real improvement to what came before
  - No clear gain to switch to this language
- Being specific to one problem
  - do interesting thing X but do not advance in all other places

### Qualities of a good programming language

- (progressivly having to learn new parts / not having to learn everything at once) makes the language easier to learn
  - see talk about type classes, concept is from Swift
  - begin with a simple script like Python and be able to makke it complex over time
- future proof
  - reserved keywords: try, catch, throw, ..
  - allow breaking changes (semantic versioning), Rust good, Python ok, Js/C++ bad, C does not really extend language anymore but rather core libs right?
- Good Package Manager
  - https://www.reddit.com/r/ProgrammingLanguages/comments/zqjf47/a_good_dependency_manager_for_a_new_programming/
  - https://futhark-lang.org/blog/2018-07-20-the-future-futhark-package-manager.html

### Type Systems

- getting more powerful
- type inference
- Type Classes have been adapted
  - easily extend functionality of uncontrollable 3rd parties
  - Swift protocols
  - C++23 concepts
  - Rust traits
  - Java, C# Interfaces?
- where?
  - JavaScript
    - TypeScript, other one from Facebook
    - Proposal to add type annotations
  - Python
    - added type annotations
  - Rust, Go, Swift
  - auto in C++
  - state of C, C++, C#, Java, php types?

### Null Safety

- solutions based on powerful type systems
  - Rust, Swift, Dart?
  - TypeScript checks for null/undefined
- what are the others up to?

### Functional programming

- C++
  - addition and work on the _functional_ module
  - algorithms to work with lists and iterators
- Python

<!-- [Programming Language Explorations](https://rtoal.github.io/ple) -->

{{< pagebreak >}}
