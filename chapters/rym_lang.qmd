# Rym Programming Language
<!-- # Rym Programmiersprache -->

Rym is a general purpose language designed for working at a level above systems programming,
while still allowing the use of lower level features when required.
While both an interpreter and a compiler can be used to implement Rym, the current implementation is an interpreter.
This description, however, does not assume anything about the implementaion and makes a future compiled version possible.

## Syntax {#sec-syntax}

Which syntax the user of a language prefers is their objective opinion and it is not possible to give a subjective best answer.
But most programmers are used to a C-style syntax which is why Rym,
like Kotlin, Rust, Dart, and others simply adapts it.
Actual functional changes happen at the semantic level.

<!-- __TODO Explain difference between syntax and semantics__ -->

<!-- As is advantageous if not everything is completely new when getting to know the language,
as it can then be learned more quickly if you already know how to program. -->

## General Structure {#sec-general-structure}

Rym's execution model is based on packages, which can be either a library or an executable.
Packages containing a "main" function can be run as standalone programs, while others are reusable libraries.
These packages are made up of modules, functions, constants and other definitions that form a tree-like structure,
that provides organisation for the code.
__TODO Mention where the constructs are explained in detail__

Source files that represent a top-level module use the .rym extension.
To better adhere to the __TODO__ principle, Rym also allows the execution of ".rys" script files.
These scripts work much like a JavaScript or Python file,
where all statements are executed immediately without the need to define an entry function.
Rym achieves this by simply wrapping the contents of the script in a main function.

A look at the typical "Hello World!" shows what this transformation looks like in practice:

```rym
// hello_world.rys

print("Hello World!")
```

It is just as simple as a Python version that does the same thing, but actually corresponds to:

```rym
// hello_world.rym

func main() -> () {
  print("Hello World!")
}
```
