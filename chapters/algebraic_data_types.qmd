# Algebraic Data Types {#sec-algebraic-data-types}

Definintion

## Product Types

* explain product types
  * https://jrsinclair.com/articles/2019/algebraic-data-types-what-i-wish-someone-had-explained-about-functional-programming

* exist in:
  * Js/Ts (Arrays, Objects, Maps, WeakMaps)
  * Python (Lists, Records, ..)
  * PHP
  * Java
  * C#
  * C++ (Classes, Structs, ..)
  * C (Structs, ..)
  * Go
  * Rust (Structs, ..)

## Sum Types

* explain sum types
  * https://jrsinclair.com/articles/2019/algebraic-data-types-what-i-wish-someone-had-explained-about-functional-programming/

* exist in: (https://en.wikipedia.org/wiki/Algebraic_data_type)
  * C++, Java 15, Rust, TypeScript
  * F#, Haskell, Idris, Kotlin, Nim, Swift

### Enums {#sec-enum}

```rym
// Declare an enum.
enum Type {
  Ok,
  NotOk,
}

// Declare a specific enum field.
const c = Type.Ok
```

An `enum` can be `match`ed upon.

```rym
enum Foo {
  String,
  Number,
  None,
}
test "enum match" {
  const foo = Foo.Number
  const what_is_it = match foo {
    Foo.String => "this is a string",
    Foo.Number => "this is a number",
    Foo.None => "this is a none",
  }
  assert_eq(what_is_it, "this is a number")
}
```

## Optional Values

- used
  - Initial values
  - Return values for functions that are not defined over their entire input range (partial functions)
  - Return value for otherwise reporting simple errors, where None is returned on error
  - Optional struct fields
  - Struct fields that can be loaned or “taken”
  - Optional function arguments
  - Nullable pointers
  - Swapping things out of difficult situations
- The _Option_ type represents an optional value: every _Option_ is either _Some_ and contains a value, or _None_, and does not. _Option_ types are very common in Rym code, as they have a number of uses:
- _Options_ are commonly paired with pattern matching to query the presence of a value and take action, always accounting for the _None_ case.
- null references, the billion dollar mistake
  - https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/
  - https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/
  - https://en.wikipedia.org/wiki/Tony_Hoare
- Ts
  - `null`, `undefined`
  - can be detected by Ts compiler
- Java, C, C++, ..
- Rust
  - `Option` enum
  - must be unwrapped to use the value
- `Option`s replace null references
  - is a sum type / enum

@adhocp_1989
