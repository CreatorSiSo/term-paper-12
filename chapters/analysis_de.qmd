# Analyse bestehender Programmiersprachen

Der nächste Schritt auf der Suche nach einer Antwort besteht darin, die derzeit verwendeten Programmiersprachen zu untersuchen,
insbesondere solche, die erst vor kurzem erschienen sind, und herauszufinden, was sie im Vergleich zu älteren Sprachen geändert haben.

## Zu analysierende Daten

Um die Anzahl der Sprachen in einem praktikablen Rahmen zu halten, werden nur die populäreren Programmiersprachen des Jahres 2022 analysiert.
Die Hauptquelle für diese Daten ist die _StackOverflow Developer Survey 2022_,
eine weltweite Umfrage, die seit 2011 jährlich durchgeführt wird und sich an alle richtet, die programmieren.
Unterhalb dieses Absatzes sehen Sie eine Statistik aus der Umfrage, in der die Programmiersprachen nach ihrer Beliebtheit sortiert sind.
Die Höhe eines Balkens entspricht der Anzahl der Stimmen, die diese Sprache erhalten hat.
Alle Teilnehmer sollten für alle Sprachen stimmen, die sie im letzten Jahr verwendet haben und weiterhin verwenden werden.
[@so_surveys; @so_survey_2022; @so_survey_2022_data]

![Die beliebtesten Programmiersprachen im Jahr 2022 __TODO: Color should show the prog lang age__](../data/stackoverflow-survey-2022.png){#fig-fig-so-survey}

In den Originaldaten werden auch HTML, CSS, SQL, Bash/Shell und PowerShell erwähnt.
Sie werden hier nicht berücksichtigt, da sie hochspezialisiert und zum Teil nicht Turing-vollständig _(engl. Turing-complete)_ sind.[^tc-note]

[^tc-note]: Eine Turing-vollständige Sprache kann benutzt verwendet werden, um beliebige Algorithmen zu implementieren @scott_2009, @scott_2016

__TODO: Reword once age is visible in diagram__
According to the StackOverflow Developer Survey 2022, JavaScript (1995), Python (1991), Typescript (2012), Java (1995), C# (2000),
C++ (1985), PHP (1995), C (1978), Go (2009) and Rust (2010) are the ten most widely used programming languages.
On average, these languages are therefore 25 years old.
[@age_prog_langs]

## Populäre Sprachen

## "Neue" Sprachen

Viele neuere Programmiersprachen, die als Nachfolger älterer Sprachen angesehen werden können, haben in den letzten Jahren an Popularität gewonnen.
Zu diesen Sprachen gehört Kotlin von JetBrains^[JetBrains ist ein Unternehmen, das integrierte Entwicklungsumgebungen entwickelt.] als Nachfolger von Java.
Kotlin versucht, kurz und bündig, sicherer und ausdrucksstärker __TODO Wrong translation? exprssive comes from expression based languages or the expression language construct__ zu sein, während es weiterhin auf der Java Virtual Machine läuft und Interoperabilität mit Java bietet.
Groovy von Apache, Closure und Scala sind andere JVM-basierte Sprachen, die mit Java verwendet werden können und schon seit einiger Zeit auf dem Markt sind,
aber sie haben nicht so viel Popularität wie Kotlin gewonnen.
Die offizielle Unterstützung von Google für die Android-Entwicklung mit Kotlin war möglicherweise der Hauptfaktor für den Erfolg von Kotlin.
[@groovy_web; @groovy_docs; @closure_web; @closure_ref; @scala_web; @scala_origins; @scala_spec; @jetbrains_web; @kotlin_web; @kotlin_ref; @android_kotlin]

Eine weitere Programmiersprache, die in den letzten Jahren an Popularität gewonnen hat, ist Rust,
die von Graydon Hoare bei Mozilla ins Leben gerufen wurde und heute ein unabhängiges Community-Projekt ist.
Rust ist eine Systemprogrammiersprache, die sowohl sicher als auch schnell ist.
Sie zielt darauf ab, Risiken wie Null- oder Dangling-Pointer-Referenzen zu eliminieren, die zu Speichersicherheitsproblemen führen können, die häufig bei der Verwendung von C/C++ auftreten.
[@infoq_rust_interview; @rust_web]

__TODO Google: Go, Dart__
Go and Dart are both programming languages developed by Google that have been gaining popularity in recent years.
Both languages were created to address specific issues in the programming world and to provide a solution for developers.
Go, often referred to as "Go", was developed to address the need for a language that is simple,
efficient and easy to learn, while still providing a high level of performance and scalability.
Go is particularly well-suited for building networked services and large-scale web applications,
it aims to make it easy to write concurrent and parallel systems.
On the other hand, Dart was created to address the issue of building fast and high-performance apps on multiple platforms.
Dart is designed to be a client-optimized language for building fast apps on any platform,
it allows for a single codebase to run on different platforms and provides features such as Just-In-Time (JIT) and Ahead-of-Time (AOT) compilation.

- __TODO__
  - Carbon?
  - Swift: Developed by Apple, Swift is a general-purpose, compiled programming language that is designed to be easy to learn and use. It is particularly well-suited for developing iOS and macOS applications, and has been gaining popularity among developers for its modern syntax, strong type system, and improved performance over Objective-C.
  - TypeScript: Developed by Microsoft, TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. It was designed to make it easier to write and maintain large-scale JavaScript applications by adding features such as static typing, interfaces, and classes. It is widely used in Angular and React projects.
  - Julia: Developed to be used in scientific, engineering, and technical computing, Julia is a high-performance, high-level dynamic programming language. It is designed to be easy to use and has a syntax similar to that of MATLAB or Python. Julia is particularly well-suited for data science and numerical computing and it's been gaining popularity among researchers and data scientists.
  - Scala: Developed by Martin Odersky, Scala is a general-purpose programming language that runs on the Java Virtual Machine (JVM). It is designed to be an object-oriented and functional language, and it's been gaining popularity among developers for its ability to write concurrent and parallel systems. It's also widely used for big data processing using Apache Spark.

## Results

### Problems of current and past programming languages

- Parallelization
- (Uncontrolled) Undefined Behaviour
  - https://blog.sigplan.org/2021/11/18/undefined-behavior-deserves-a-better-reputation
- Side Effect Safety, Non local reasoning, Sand Boxing
  - https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/comment/e5s3vhb/?utm_source=share&utm_medium=web2x&context=3
  - Code that we read is not understandable in isolation. For example, taking C++: `call(foo);`, is `foo` modified? Dunno.
    - https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/comment/e5v3vj5/?utm_source=share&utm_medium=web2x&context=3
  - Solved by: Koka
- Cannot rewind time while debugging
  - [Reversible Computation: Extending Horizons of Computing](https://link.springer.com/content/pdf/10.1007/978-3-030-47361-7.pdf)
- Rust solves most of these, but a watered-down version which only loses a bit of efficiency could probably help a lot. [Source](https://www.reddit.com/r/ProgrammingLanguages/comments/9eqrfy/comment/e5v3vj5/?utm_source=share&utm_medium=web2x&context=3) => Basically what Rym tries to be :)

### Problems of new programming languages

- https://www.quora.com/What-are-the-biggest-problems-with-modern-programming-languages?share=1
- There are too many of them
- No innovation
  - Too conservative, offer no real improvement to what came before
  - No clear gain to switch to this language
- Being specific to one problem
  - do interesting thing X but do not advance in all other places

### Qualities of a good programming language

- (progressivly having to learn new parts / not having to learn everything at once) makes the language easier to learn
  - see talk about type classes, concept is from Swift
  - begin with a simple script like Python and be able to makke it complex over time
- future proof
  - reserved keywords: try, catch, throw, ..
  - allow breaking changes (semantic versioning), Rust good, Python ok, Js/C++ bad, C does not really extend language anymore but rather core libs right?
- Good Package Manager
  - https://www.reddit.com/r/ProgrammingLanguages/comments/zqjf47/a_good_dependency_manager_for_a_new_programming/
  - https://futhark-lang.org/blog/2018-07-20-the-future-futhark-package-manager.html

### Type Systems

- getting more powerful
- type inference
- Type Classes have been adapted
  - easily extend functionality of uncontrollable 3rd parties
  - Swift protocols
  - C++23 concepts
  - Rust traits
  - Java, C# Interfaces?
- where?
  - JavaScript
    - TypeScript, other one from Facebook
    - Proposal to add type annotations
  - Python
    - added type annotations
  - Rust, Go, Swift
  - auto in C++
  - state of C, C++, C#, Java, php types?

### Null Safety

- solutions based on powerful type systems
  - Rust, Swift, Dart?
  - TypeScript checks for null/undefined
- what are the others up to?

### Functional programming

- C++
  - addition and work on the _functional_ module
  - algorithms to work with lists and iterators
- Python

<!-- [Programming Language Explorations](https://rtoal.github.io/ple) -->

{{< pagebreak >}}
