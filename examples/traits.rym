mod Operators {
	trait Add {
		fn add(self, rhs: Self) -> Self
	}

	trait Sub {
		fn sub(self, rhs: Self) -> Self
	}

	trait Mul {
		fn mul(self, rhs: Self) -> Self
	}

	trait Div {
		fn div(self, rhs: Self) -> Self
	}

	trait Rem {
		type Rhs
		fn rem(self, rhs: Rhs) -> Self
	}

	trait Neg {
		fn neg(self) -> Self
	}

	trait Eq {
		fn eq(self, rhs: Self) -> bool
		fn not_eq(self, rhs: Self) -> bool
	}
}

mod floats {
	impl Rem for f32 where Self: Div {
		type Rhs = uint?
	}
}
