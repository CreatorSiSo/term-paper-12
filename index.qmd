# Introduction {#sec-intro}

Every year, numerous new programming languages are released.
A lot of them start out as parts of a scientific thesis, and in their spare time, both private individuals and students frequently work on their own languages to learn about various aspects of implementing them.
In some cases, businesses or organisations wish to address a specific issue, but the right technology is still missing.
Even though the majority of them are never used by the average developer, by trying out new ideas, they can generally bring all programming languages forward.

A new language has the advantage of not being hindered by its own special circumstances that have evolved over time,
as was the case with many predecessors.
Since one can start from scratch on the implementation, but conceptually all knowledge from previous attempts is used,
completely new ideas can be tried out much easier and faster.
That process can be more difficult with a language that is used by thousands of people and should remain as stable as possible.

Another advantage of small new projects is that there is less bureaucracy and coordination,
which makes it possible to iteratively try out many concepts quickly.
The coordination is quite important in larger projects,
as there are often many people working on them at the same time, and otherwise there would be little progress.

If the resulting approaches of the â€žnewcomers" seem to make sense and are adapted on a large scale,
this often results in an integration into older, more established languages.
Precisely such a language will be designed and implemented in the context of this paper by analysing generally advantageous characteristics, proven technologies, and combining them with new ideas.

This thesis therefore deals with the analysis of past as well as current programming languages in order to find out in which direction they are currently developing.
From the knowledge gained from this, a new language will be designed,
which should make a possible answer to the question: _What would a next generation programming language look like?_

<!--
- The goal of this paper is the conception and implementation of a new programming language called Rym

- What exactly is a programming language
  - artificial language
  - turing complete
  - general

1. general pros of programming languages
2. flaws of currently used programming languages
3. specific features of Rym based on 2. and adhearing to 1.
-->
