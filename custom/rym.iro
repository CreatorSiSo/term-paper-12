// Press Ctrl + '+'/'-' To Zoom in
// Press Ctrl + S to save and recalculate...
// Documents are saved to web storage.
// Only one save slot supported.
// Matches cannot span lines.
// Unicode chars must be defined in \u0000 to \uffff format.
// All matches must be contained by a single group ( ... )
// Look behinds not permitted, (?<= or (?<!
// Look forwards are permitted (?= or (?!
// Constants are defined as __my_const = (......)
// The \= format allows unescaped regular expressions
// Constants referenced by match \= $${__my_const}
// Constants can reference other constants

name                   = rym
file_extensions[]      = rym;

// Styles

styles[] {
   .comment: style {
      color                 = grey
      italic                = true
      ace_scope             = comment
      textmate_scope        = comment
      pygments_scope        = Comment
   }

   .keyword: style {
      color                 = pink
      ace_scope             = keyword
      textmate_scope        = keyword
      pygments_scope        = Keyword
   }

   .decl_keyword: style {
      color                 = orange
      ace_scope             = keyword
      textmate_scope        = keyword
      pygments_scope        = Keyword
   }

   .numeric : style {
      color                 = orange
      ace_scope             = constant.numeric
      textmate_scope        = constant.numeric
      pygments_scope        = Number
   }

   .punctuation : style {
      color                 = blue
      ace_scope             = punctuation
      textmate_scope        = punctuation
      pygments_scope        = Punctuation
   }

   .text : style {
      color                 = brown
      ace_scope             = text
      textmate_scope        = text
      pygments_scope        = String
   }
}

// Parse contexts

contexts [] {
   // Main Context - Entry point context
   main : context {
      : pattern {
         regex          \= (use|const|mut|func|proc|while|loop|for|as)
         styles []       = .keyword;
      }

      : pattern {
         regex          \= ([a-zA-Z|_][A-Za-z0-9|_]*)
         styles []       = .text;
      }

      : include "numeric" ;

      : inline_push {
         regex          \= (\{)
         styles []       = .punctuation;
         : pop {
            regex       \= (\})
            styles []    = .punctuation;
         }
         : include "main" ;
      }

      : pattern {
         regex          \= (;|\.|:|=|\*|->|@)
         styles []       = .punctuation;
      }

      : inline_push {
         regex          \= (\")
         styles []       = .punctuation;
         default_style   = .text
         : pop {
            regex       \= (\")
            styles []    = .punctuation;
         }
      }

      : inline_push {
         regex          \= (\()
         styles []       = .punctuation;
         : pop {
            regex       \= (\))
            styles []    = .punctuation;
         }
         : include "numeric" ;
         : pattern {
            regex       \= (,)
            styles []    = .punctuation;
         }
      }

      : include "multi_line_comment" ;

      : pattern {
         regex          \= (//.*)
         styles []       = .comment;
      }
   }

   // Numeric Context
   numeric : context {
      : pattern {
         regex          \= (\b\d+)
         styles []       = .numeric;
      }
   }

   // Multi Line Comment Context
   multi_line_comment : context {
      description        = multiline
      : inline_push {
         regex          \= (/\*)
         styles []       = .comment;
         default_style   = .comment
         : pop {
            regex       \= (\*/)
            styles []    = .comment;
         }
      }
   }
}
